Три сущьности

    Допустим, мы хотим разрешить студентам регистрироваться на курсы. Также нам необходимо сохранить момент регистрации
    студента на определенный курс. Кроме того, мы хотим сохранить, какую оценку она получила за курс.

    В идеальном мире мы могли бы решить эту проблему с помощью предыдущего решения, в котором у нас была сущность
    с составным ключом. Однако мир далек от идеала, и студенты не всегда проходят курс с первой попытки.

    В этом случае существует несколько связей между одними и теми же парами студент-курс или несколькими строками
    с одинаковыми парами Student_id-course_id . Мы не можем смоделировать это, используя любое из предыдущих решений,
    поскольку все первичные ключи должны быть уникальными. Итак, нам нужно использовать отдельный первичный ключ.

    Следовательно, мы можем ввести сущность , которая будет хранить атрибуты регистрации:


    Student --< Registration >-- Course


    В этом случае объект «Регистрация» представляет связь между двумя другими объектами.

    Поскольку это сущность, у нее будет собственный первичный ключ.

    Помните, что в предыдущем решении у нас был составной первичный ключ, созданный из двух внешних ключей.

    Теперь два внешних ключа не будут частью первичного ключа:

    модель сущности отношения обновлена

    tabl student(PK id)  --<
    tabl course_registration(PK id, FK student_id, FK course_id, registret_at, grade)
    >-- tabl course(PK id)



    БД формируется на основании аннотаций в них.
    База данных используется PostgreSQL (BobDB, пользователь - bob, пароль - bob)

    файл resources/application.properties настроин таким образом , что база данных заполняется на основании
     DML скрипта  resources/sql/data.sql



     DDL скрипт:

     Hibernate:
         create table course (
             course_id bigint generated by default as identity,
             course_code varchar(255),
             course_name varchar(255),
             primary key (course_id)
         )
     Hibernate:
         create table course_registration (
             grade integer not null,
             course_id bigint,
             id bigint generated by default as identity,
             registeredAt timestamp(6),
             student_id bigint,
             primary key (id)
         )
     Hibernate:
         create table student (
             student_id bigint generated by default as identity,
             student_name varchar(255),
             student_recordbook varchar(255) unique,
             primary key (student_id)
         )
     Hibernate:
         alter table if exists course_registration
            add constraint FKkcpyqpea6srulkxuhvrwrvhow
            foreign key (course_id)
            references course
     Hibernate:
         alter table if exists course_registration
            add constraint FKi5hvb7p3dafd9qd3k3eyeyann
            foreign key (student_id)
            references student

